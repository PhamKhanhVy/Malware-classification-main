from typing import Tuple, Union, List
import numpy as np
from keras.models import Sequential
from sklearn.model_selection import train_test_split
import tensorflow as tf
import pandas as pd

XY = Tuple[np.ndarray, np.ndarray]
Dataset = Tuple[XY, XY]
Params = Union[XY, Tuple[np.ndarray]]
XYList = List[XY]

def find_label(name): 
        if('Benign' in name): return 0
        elif('Ransomware' in name): return 1
        elif('Spyware' in name): return 2
        elif('Trojan' in name): return 3
        
def get_model_parameters(model: Sequential) -> Params: #trả về tham số mô hình cục bộ
    """Returns the paramters of a sklearn LogisticRegression model."""
    return model.get_weights()

def set_model_params(       #khởi tạo tham số cho mô hình
    model: Sequential, params: Params
) -> Sequential:
    """Sets the parameters of a sklean LogisticRegression model."""
    model.set_weights(params)
    return model



def set_initial_params(model: Sequential): #cập nhật tham số
    """Sets initial parameters as zeros Required since model params are
    uninitialized until model.fit is called.
    But server asks for initial parameters from clients at launch. Refer
    to sklearn.linear_model.LogisticRegression documentation for more
    information.
    """
    n_classes = 4  # MNIST has 10 classes
    n_features = 55  # Number of features in dataset
    model.classes_ = np.array([i for i in range(4)])
    input_example = np.zeros((n_classes, n_features))  # Đầu vào ví dụ
    _ = model.predict(input_example)

def load_data() -> Dataset:
    data = pd.read_csv('D:\HỌC MÁY THỐNG KÊ\Project - Copy\Fed_Mal_Det\Obfuscated-MalMem2022.csv')
    shuffled_df = data.sample(frac=1, random_state=1)
    X= shuffled_df.iloc[:, 1:56]
    y= shuffled_df ['Category']
    # Tách label từ cột category và lưu thành cột mới
    labels=[]
    for i in y:
        labels.append( i.split('-')[0])
    shuffled_df ['label'] = labels
    y = []
    for i in shuffled_df ['label']:
        y.append(find_label(i))
    X = np.array(X)
    y = np.array(y)
    x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
    return (x_train, y_train), (x_test, y_test)

def partition(X: np.ndarray, y: np.ndarray, num_partitions: int) -> XYList: #phân chia dữu liệu
    """Split X and y into a number of partitions."""
    return list(
        zip(np.array_split(X, num_partitions), np.array_split(y, num_partitions))
    )
